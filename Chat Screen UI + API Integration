import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class ChatScreen extends StatefulWidget {
  const ChatScreen({super.key});

  @override
  State<ChatScreen> createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final msgController = TextEditingController();
  List<dynamic> messages = [];
  bool isLoading = true;

  // TEMP IDs â€“ Use your test MongoDB IDs
  final String currentUserId = "<your_user_id>";
  final String targetUserId = "<receiver_user_id>";

  Future<void> fetchMessages() async {
    final res = await http.get(
      Uri.parse("http://<your_backend_url>/api/chats/$currentUserId/$targetUserId"),
    );
    if (res.statusCode == 200) {
      setState(() {
        messages = jsonDecode(res.body);
        isLoading = false;
      });
    }
  }

  Future<void> sendMessage() async {
    if (msgController.text.trim().isEmpty) return;
    final res = await http.post(
      Uri.parse("http://<your_backend_url>/api/chats/send"),
      headers: {"Content-Type": "application/json"},
      body: jsonEncode({
        "sender": currentUserId,
        "receiver": targetUserId,
        "content": msgController.text.trim(),
      }),
    );
    if (res.statusCode == 201) {
      msgController.clear();
      fetchMessages(); // Refresh
    }
  }

  @override
  void initState() {
    super.initState();
    fetchMessages();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Chat")),
      body: Column(
        children: [
          Expanded(
            child: isLoading
                ? const Center(child: CircularProgressIndicator())
                : ListView.builder(
                    reverse: true,
                    itemCount: messages.length,
                    itemBuilder: (_, i) {
                      final msg = messages[messages.length - 1 - i];
                      final isMine = msg['sender'] == currentUserId;
                      return Align(
                        alignment: isMine ? Alignment.centerRight : Alignment.centerLeft,
                        child: Container(
                          margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            color: isMine ? Colors.blue[100] : Colors.grey[300],
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: Text(msg['content']),
                        ),
                      );
                    },
                  ),
          ),
          Padding(
            padding: const EdgeInsets.all(8),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: msgController,
                    decoration: const InputDecoration(hintText: "Type a message"),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.send),
                  onPressed: sendMessage,
                )
              ],
            ),
          )
        ],
      ),
    );
  }
}
